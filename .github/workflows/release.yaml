---
name: release

on:
  workflow_run:
    workflows: [security]
    types: [completed]
    branches: [main]
    tags: ["*"]

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --force --tags
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19
      - name: Grab Cosign private key
        run: |
          echo "${COSIGN_PRIVATE_KEY}" > ./golang-starter.key
          chmod 0600 ./golang-starter.key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        # https://docs.docker.com/docker-hub/access-tokens/
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_GHCR_TOKEN }}
      - name: Login to Quay Container Registry
        uses: docker/login-action@v2
        # https://github.com/marketplace/actions/push-to-registry#examples
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Clean up Cosign private key
        run: shred -u ./golang-starter.key

  verify_signed_docker_images:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    permissions: {}
    strategy:
      matrix:
        registry: ['', 'ghcr.io/', 'quay.io/']
        tag: ['latest', '-arm64', '-amd64']
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Get public cosign key for golang-starter project from GitHub
        run: |
          curl --silent https://raw.githubusercontent.com/toozej/golang-starter/main/golang-starter.pub -O
      - name: Verify signatures of Docker images
        run: |
          cosign verify --key golang-starter.pub \
            ${{ matrix.registry }}toozej/golang-starter:${{ matrix.tag }}

  verify_signed_binaries:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    permissions: {}
    strategy:
      matrix:
        platform: ['darwin', 'linux', 'windows']
        arch: ['all', 'amd64_v1', 'arm64', 'arm_7', '386']
        extension: ['', '.exe']
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Get public cosign key
        run: |
          curl --silent https://raw.githubusercontent.com/toozej/golang-starter/main/golang-starter.pub -O
      - name: Verify signatures of binaries
        run: |
          FILE=./dist/golang-starter_${{ matrix.platform }}_${{ matrix.arch }}/golang-starter${{ matrix.extension }}
          if test -f "${FILE}"; then
            echo "verifying binary: ${FILE}"
            cosign verify --key golang-starter.pub --signature "${FILE}.sig" "${FILE}"
          else
            echo "skipping verifying non-existant binary: ${FILE}"
          fi

  verify_signed_archives:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    permissions: {}
    strategy:
      matrix:
        platform: ['Darwin', 'Linux', 'Windows']
        arch: ['all', 'arm64', 'armv7', 'i386', 'x86_64']
        extension: ['tar.gz', 'zip']
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Get public cosign key
        run: |
          curl --silent https://raw.githubusercontent.com/toozej/golang-starter/main/golang-starter.pub -O
      - name: Verify signatures of archives
        run: |
          FILE=./dist/golang-starter_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.extension }}
          if test -f "${FILE}"; then
            echo "verifying archive: ${FILE}"
            cosign verify --key golang-starter.pub --signature "${FILE}.sig" "${FILE}"
          else
            echo "skipping verifying non-existant archive: ${FILE}"
          fi
